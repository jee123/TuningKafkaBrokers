############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
#broker.id=0

# Switch to enable topic deletion or not, default value is false
#delete.topic.enable=true

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = security_protocol://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092

# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# The number of threads handling network requests
#num.network.threads=3
num.network.threads=32
#num.network.threads=64

# The number of threads doing disk I/O
#num.io.threads=8
num.io.threads=32
#num.io.threads=64

# The send buffer (SO_SNDBUF) used by the socket server
#socket.send.buffer.bytes=102400
socket.send.buffer.bytes=104857600
#socket.send.buffer.bytes=107374182400

# The receive buffer (SO_RCVBUF) used by the socket server
#socket.receive.buffer.bytes=102400
socket.receive.buffer.bytes=104857600
#socket.receive.buffer.bytes=107374182400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600
#socket.request.max.bytes=1073741824000


############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
#log.dirs=/tmp/kafka-logs

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
#num.partitions=1
num.partitions=12

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
#num.recovery.threads.per.data.dir=1
#num.recovery.threads.per.data.dir=32
num.recovery.threads.per.data.dir=4
#num.recovery.threads.per.data.dir=64

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
#log.retention.hours=168
#log.retention.hours=2
log.retention.minutes=5
# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
#zookeeper.connect=localhost:2181

# Timeout in ms for connecting to zookeeper
#zookeeper.connection.timeout.ms=6000
zookeeper.connection.timeout.ms=1000000

##################### Confluent Proactive Support ######################
# If set to true, and confluent-support-metrics package is installed
# then the feature to collect and report support metrics
# ("Metrics") is enabled.  If set to false, the feature is disabled.
#
confluent.support.metrics.enable=true

# The customer ID under which support metrics will be collected and
# reported.
#
# When the customer ID is set to "anonymous" (the default), then only a
# reduced set of metrics is being collected and reported.
#
# Confluent customers
# -------------------
# If you are a Confluent customer, then you should replace the default
# value with your actual Confluent customer ID.  Doing so will ensure
# that additional support metrics will be collected and reported.
#
confluent.support.customer.id=anonymous
broker.id=6
log.dirs=/mnt/nvme/tmp/a/confluent-kafka-logs, /mnt/nvme/tmp/b/confluent-kafka-logs, /mnt/nvme/tmp/c/confluent-kafka-logs, /mnt/nvme/tmp-1/d/confluent-kafka-logs, /mnt/nvme/tmp-1/e/confluent-kafka-logs, /mnt/nvme/tmp-1/f/confluent-kafka-logs, /mnt/nvme/tmp-2/g/confluent-kafka-logs, /mnt/nvme/tmp-2/h/confluent-kafka-logs, /mnt/nvme/tmp-2/i/confluent-kafka-logs, /mnt/nvme/tmp-3/j/confluent-kafka-logs, /mnt/nvme/tmp-3/k/confluent-kafka-logs, /mnt/nvme/tmp-3/l/confluent-kafka-logs
request.timeout.ms=100000
log.cleaner.threads=32
background.threads=32
num.replica.fetchers=32
listeners=PLAINTEXT://br-6:9092
zookeeper.connect=zk-1:2181,zk-3:2181,zk-4:2181
delete.topic.enable=true
offsets.commit.timeout.ms=500000
replica.fetch.wait.max.ms=5000
replica.socket.receive.buffer.bytes=67108864
replica.socket.timeout.ms=300000
log.cleaner.backoff.ms=60000
